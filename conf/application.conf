# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="2p3tqxk7<UnPTan;g^ylg@x^J]Cb_H^fX<k3RUE86UE5>7pyKKeNyuGraymIUv>u"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# play.crypto.secret = "changeme"

  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    httpOnly = false

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    maxAge = null

     path = "*",

    # Sets the domain on the session cookie.
    domain = "https://akshitsbatman.herokuapp.com"
  }
# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG
# play.filters.cors {
#   allowedOrigins = ["http://batman.com:3001","http://batman.com:3000"]
#   allowedHttpMethods = ["GET", "POST"]
#   preflightMaxAge = 3 days
# }

  # cors {
  #   # Filter paths by a whitelist of path prefixes
  #   #pathPrefixes = ["/some/path", ...]

  #   # The allowed origins. If null, all origins are allowed.
  #   #allowedOrigins = ["http://www.example.com"]

  #   # The allowed HTTP methods. If null, all methods are allowed
  #   #allowedHttpMethods = ["GET", "POST"]
  # }


  #   csrf {
  #   # Sets the cookie to be sent only over HTTPS
  #   cookie.secure = false

  #   # Defaults to CSRFErrorHandler in the root package.
  #   #errorHandler = MyCSRFErrorHandler
  # }

  # hosts {
  #   # Allow requests to example.com, its subdomains, and batman.com:9000.
  #   allowed = ["http://batman.com:3000", "batman.com:3000"]
  # }

